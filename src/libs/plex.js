const CLIENT_IDENTIFIER = "e236d6a6-3b45-4e48-bf81-d7564526fa8e"
const CLIENT_PRODUCT = "Movinate"
const CLIENT_VERSION = "0.1.0"

/**
 * Commonly used headers specific to Plex.tv.
 */
const plexHeaders = {
	"X-Plex-Client-Identifier": CLIENT_IDENTIFIER,
	"X-Plex-Product": CLIENT_PRODUCT,
	"X-Plex-Version": CLIENT_VERSION
}

/**
 * Commonly used request headers.
 */
const requestHeaders = {
	"Accept": "application/json",
	"X-Requested-With": "javascript"
}

/**
 * Requests a pin from Plex.tv and uses that to generate the login URI.
 * @returns {Object} The response from Plex.tv, including the pin id and code, plus the redirect URI.
 * @throws Errors from the {@link fetch} request if failed.
 */
export async function getLoginUrl() {
	var params = new URLSearchParams({
		strong: "true",
		"X-Plex-Product": CLIENT_PRODUCT,
		"X-Plex-Client-Identifier": CLIENT_IDENTIFIER
	})

	try {
		let response = await fetch("https://plex.tv/api/v2/pins", {
			method: "post",
			headers: {
				...requestHeaders,
				"Content-Type": "application/x-www-form-urlencoded"
			},
			body: params
		})

		let data = await response.json()
		params = new URLSearchParams({
			"clientID": CLIENT_IDENTIFIER,
			"code": data.code
		})
		return {
			...data,
			uri: encodeURI(`https://app.plex.tv/auth#?${params}`)
		}
	} catch (error) {
		console.error("Failed to get login url with error: ", error)
	}
}

/**
 * Polls the Plex.tv service for verification of the login attempt.
 * @param {String} id The unique pin id generated by Plex.tv for the login attempt. Provided from the {@link getLoginUrl} function.
 * @param {String} code The unique pin code generated by Plex.tv for the login attempt. Provided from the {@link getLoginUrl} function.
 * @param {Number} timeout How long to wait before assuming the login attempt failed. Specified in seconds.
 * @returns {Promise<Object, String>} The response from Plex.tv, containing the authCode for future requests. Rejection provides an error string.
 * @throws Errors from the {@link fetch} request if failed.
 */
export function loginCheck(id, code, timeout = 60) {
	return new Promise((resolve, reject) => {
		if (id == null || id == undefined || id.length == 0) {
			reject("id does not have a valid value.")
			return
		}

		if (code == null || code == undefined || code.length == 0) {
			reject("code does not have a valid value.")
			return
		}

		let interval = setInterval(async () => {
			try {
				var params = new URLSearchParams({
					code: code,
					"X-Plex-Client-Identifier": CLIENT_IDENTIFIER
				})

				let response = await fetch(encodeURI(`https://plex.tv/api/v2/pins/${id}?${params}`), {
					method: "get",
					headers: {
						...requestHeaders,
						"Content-Type": "application/x-www-form-urlencoded"
					}
				})

				let data = await response.json()
				if (data.authToken) {
					clearInterval(interval)
					resolve(data.authToken)
				}
			} catch (error) {
				reject(`Fetch request failed with error: ${error}`)
				clearInterval(interval)
				return
			}
		}, 1500)

		setTimeout(() => {
			clearInterval(interval)
			reject("Did not receive a authToken from Plex server before timeout.")
		}, timeout * 1000)
	})
}

/**
 * Fetches all of the servers, minus relay servers, that are available to the user.
 * @param {String} authToken The users authentication token provided from Plex.tv.
 * @returns {Object} All of the servers available to the user.
 * @throws Errors from the {@link fetch} request if failed.
 */
export async function getServerList(authToken) {
	try {
		let response = await fetch("https://plex.tv/api/v2/resources?includeIPv6=0&includeRelay=0", {
			method: "get",
			headers: {
				...requestHeaders,
				...plexHeaders,
				"X-Plex-Token": authToken
			}
		})

		let data = await response.json();
		return data

	} catch (error) {
		console.error("Failed to fetch a list of servers with error: ", error)
	}
}

/**
 * Fetches every library on a server, that are available to the user.
 * @param {String} serverUrl The URL for any server that is available to the user. Obtained through {@link getServerList}.
 * @param {String} authToken The users authentication token provided from Plex.tv.
 * @returns Every library of a server that is available to the user.
 * @throws Errors from the {@link fetch} request if failed.
 */
export async function getLibraryList(serverUrl, authToken) {
	try {
		let response = await fetch(`http://${serverUrl}:32400/library/sections?X-Plex-Token=${authToken}`, {
			method: "get",
			headers: {
				...requestHeaders,
				...plexHeaders,
				"X-Plex-Token": authToken,
			}
		})

		let data = await response.json()
		return data.MediaContainer.Directory;
	} catch (error) {
		console.error("Failed to fetch a list of libraries with error: ", error)
	}
}

/**
 * Fetches every item (Movies, TV, etc) from a library, that is available to the user.
 * @param {String} serverUrl The URL for the server housing the library. Must be available to the user.
 * @param {String} library The id of a given library. Canonically named *libraryKey* from Plex.tv. 
 * @param {String} authToken The users authentication token provided from Plex.tv.
 * @returns Every item within the library that is available to the user.
 * @throws Errors from the {@link fetch} request if failed.
 */
export async function getLibraryItems(serverUrl, library, authToken) {
	try {
		let response = await fetch(`http://${serverUrl}:32400/library/sections/${library}/all?X-Plex-Token=${authToken}`, {
			method: "get",
			headers: { 
				...requestHeaders,
				...plexHeaders,
				"X-Plex-Token": authToken
			}
		})

		let data = await response.json()
		return data.MediaContainer
	} catch (error) {
		console.error("Failed to fetch a list of library items with error: ", error)
	}
}

/**
 * Fetches a single item from a library, that is available to the user.
 * @param {String} serverUrl The URL for the server housing the library item. Must be available to the user.
 * @param {String} item The id of a given library item. Canonically named *ratingKey* from Plex.tv. 
 * @param {String} authToken The users authentication token provided from Plex.tv.
 * @returns The specific details of an item (Title, metadata, etc) that is available to the user.
 * @throws Errors from the {@link fetch} request if failed.
 */
export async function getLibraryItem(serverUrl, item, authToken) {
	try {
		let response = await fetch(`http://${serverUrl}:32400/library/metadata/${item}?X-Plex-Token=${authToken}`, {
			method: "get",
			headers: {
				...requestHeaders,
				...plexHeaders,
				"X-Plex-Token": authToken
			}
		})

		let data = await response.json()
		return data.MediaContainer
	} catch (error) {
		console.error("Failed to fetch the library item with error: ", error)
	}
}
